# -*- coding: utf-8 -*-
"""Lab6-Decision Tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NycAv8xWORQoAKvQBou85WGVkBv8byYY

DECISION TREE CLASSIFIER USING GINI INDEX AS IMPURITY MEASURE

1. Load the German Credit card dataset
"""

from google.colab import files
uploaded = files.upload()

"""2. Create a Pandas Frame for this file and explore its content"""

import pandas as pd
df=pd.read_csv("/content/German Credit Data.csv")
df.shape
df.info()
df.head()

"""3. Print the first five records and first 7 columns"""

df.iloc[0:5,0:7]

"""4. Print the first five records and remaining columns"""

df.iloc[0:5,7:]

"""5. Few of the columns are categorical and are infered as objects. Ex: checkin_acc. Print all unique values of this column"""

df['checkin_acc'].unique()

"""6. Encode all categorical features using one-hot encoding. A feature with n values is encoded using (n-1) values, retaining the first one (drop_first = True)"""

x_features=list(df.columns)
x_features.remove('status')
encoded_df=pd.get_dummies(df[x_features],drop_first=True)
print(list(encoded_df.columns))

"""7. Make independent features of the encoded frame as X and column 'status' as dependent feature."""

x=encoded_df
y=df['status']

"""8. Divide data into 70% training and 30% as testing.  """

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)

"""9. Train a decision tree model using Gini INdex and depth of 3"""

from sklearn.tree import DecisionTreeClassifier
clf=DecisionTreeClassifier(criterion='gini', max_depth=3)
clf.fit(x_train,y_train)

"""10. Make predictions on test/validation data"""

pred_y=clf.predict(x_test)

"""11. Print the confusion matrix, accuracy and AUC score of this model on test set"""

from sklearn import metrics
print("Confusion Matrix is\n",metrics.confusion_matrix(pred_y,y_test))
print("Accuracy is\n",metrics.accuracy_score(pred_y,y_test))
print("AUC Score is\n",metrics.roc_auc_score(pred_y,y_test))

"""12. Visualize the tree using grapghviz and pydotplus libraries"""

from sklearn.tree import export_graphviz
import pydotplus as pdot
from IPython.display import Image
export_graphviz(clf,out_file="tree.odt",feature_names=x_train.columns,filled=True)
graph=pdot.graphviz.graph_from_dot_file("tree.odt")
graph.write_jpg("tree.png")
Image(filename="tree.png")